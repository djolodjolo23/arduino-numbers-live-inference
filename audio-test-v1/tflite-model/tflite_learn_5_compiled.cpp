/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 22.05.2024 08:20:40

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 8
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 3200;
#else
constexpr int kTensorArenaSize = 2176;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,650 } };
const TfArray<1, float> quant0_scale = { 1, { 0.049091137945652008, } };
const TfArray<1, int> quant0_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { 1, 1, 50, 13, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data2[4] = { 1, 50, 1, 8, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data3[4] = { 1, 1, 25, 8, };
const TfArray<1, int> tensor_dimension3 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data4[4] = { 1, 25, 1, 16, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data5[2] = { -1, 208, };
const TfArray<1, int> tensor_dimension5 = { 1, { 2 } };
const ALIGN(16) int32_t tensor_data6[10] = { -331, 15, -47, 273, -163, 495, 632, -574, -636, 198, };
const TfArray<1, int> tensor_dimension6 = { 1, { 10 } };
const TfArray<1, float> quant6_scale = { 1, { 0.00042860981193371117, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[10*208] = { 
  -45, -15, 6, 14, -31, -12, 4, -15, 24, 19, 33, 7, 4, -60, -31, -58, -23, -5, 8, 5, -4, -1, 3, 6, 15, 14, 14, -16, 25, -12, -34, -26, 12, -8, 12, 10, 26, -27, -35, 8, 26, 1, 33, -28, 29, -30, -25, -33, 40, -4, 1, 2, 13, -17, -16, 4, -1, 28, 14, -21, 15, 13, -3, -13, 34, -20, -8, -25, 21, -46, 8, -5, -21, 17, 10, -16, -14, -21, 1, 0, 8, -39, -8, -12, 13, -43, -2, -9, -49, -11, 0, -1, 9, -34, -7, -5, 18, -9, 2, -19, 24, -16, -8, 12, -33, -26, 10, 10, 0, 0, 14, -11, -19, 11, -10, 14, 12, -23, 23, 22, -20, -32, 7, 12, 25, 18, 9, 13, -17, 21, 24, 36, -7, -11, 6, -46, 4, -16, 25, 18, 23, 8, -31, 12, -14, -49, 10, 6, -113, 7, 8, -82, -10, -20, 30, 10, -11, -4, -30, 12, -14, -32, 0, -33, -110, 16, 1, -66, -35, -29, 15, 11, -16, 18, -11, 5, -26, -54, 12, -52, -83, 7, -16, -56, -36, -36, 10, 18, -35, 23, -25, 10, -19, -78, -8, -63, -105, 15, -3, -64, -18, -56, 38, 10, -61, -5, 1, 25, 
  25, 31, -7, -38, 31, 18, -9, 19, 14, 0, -28, -15, -6, -42, 18, -59, 8, 7, 0, -48, 4, -4, -27, 8, -43, -27, -50, -37, -3, -20, 14, -15, 0, 3, 2, 2, -16, -17, -15, -3, 17, -22, 19, -9, 1, -16, 6, -23, -24, 7, -7, 4, -23, 17, -3, -28, 9, -9, 15, 19, 9, -22, -14, -19, -28, 12, 5, 12, -8, 21, -17, -26, 20, -17, 8, 13, 3, -43, -37, -4, -13, 7, 7, -10, 4, 15, -14, -14, 15, -12, 6, 3, -5, -44, -30, -37, -17, -4, 4, 7, -11, 14, 20, -15, 28, 11, 29, -6, -5, -5, -10, -37, -14, 6, 3, -46, -27, 18, 33, -1, -4, 21, 12, 3, 8, -3, -6, -78, -21, 20, 16, -28, -41, 26, 9, -1, 8, 3, 7, 28, 2, 7, 15, -68, 4, 15, 4, -13, -35, 24, 31, 8, 5, 18, 20, 19, -23, -11, 12, -67, 5, 11, 19, -54, -20, 20, 18, 9, 9, 15, 5, 26, -11, -13, 8, -80, 10, 5, 3, -49, -14, 19, 38, -6, -7, 15, -5, 10, -5, 2, 10, -70, 14, -11, 18, -34, -22, 27, 43, -6, -9, 25, -27, 2, -17, 34, 9, -42, 
  -10, -28, 14, 26, -47, 2, 22, -10, 6, -22, -40, -8, 8, 17, 0, -13, -17, -3, -6, 19, -2, -8, -3, 7, 11, 16, 9, -5, -5, 14, -21, -23, -21, 5, -46, 4, 17, -22, -20, 2, -14, 4, 2, -23, -24, -30, -25, -54, -16, 1, -16, -3, 13, -25, -33, -1, 5, 18, 2, -6, -48, 41, -57, -29, -34, -17, -18, -24, 11, 19, -34, -17, -3, 23, 24, 13, -65, 33, -39, 7, -8, -3, 11, -14, 2, 16, -57, -29, 4, -29, 2, 13, -61, 36, -19, 13, 2, 24, 8, -15, -6, 17, -31, -1, 13, -21, -10, 18, -54, 25, -8, 2, 9, -6, 1, -41, -37, 13, -39, -7, -52, -61, -31, -2, -20, 32, 10, 14, 18, -60, 29, -38, -79, 15, -27, 1, -28, -67, -23, 1, -18, 38, 15, 39, 38, -16, 14, -9, -69, 19, -17, 5, 5, -50, -7, -7, -35, 45, 9, 19, 31, -9, 27, 14, -76, 5, -39, 11, 16, -65, 9, -11, -31, 45, 26, 27, 10, -26, 28, 14, -46, 10, -16, 19, 18, -66, -5, -6, 15, 40, -1, 28, 13, -32, 9, 14, -97, 14, -3, 3, -9, -72, -21, -22, -52, 32, 13, 42, 
  3, -7, 6, -12, 38, -29, 24, -12, 3, 23, 9, -11, -8, 7, 1, 31, -9, 16, 20, 9, 26, -7, 11, 9, 6, 18, -3, 8, -4, -11, 15, 11, -35, 19, -6, 8, -8, 1, -11, 13, 1, 6, -8, 14, -7, -46, 19, 8, -39, 19, -27, 4, 0, 25, -37, 8, -4, -5, -12, 22, 14, -22, 7, 14, -37, 17, 1, 9, 0, 17, -64, 21, 4, 14, -22, 32, -2, -26, 13, 9, -40, 17, -39, -8, -5, 20, -95, 19, 14, 6, -25, 18, -41, -16, 4, 21, -26, 34, -26, -1, -25, 8, -77, 49, -1, -4, -37, 30, -37, -6, 21, 24, -19, -11, -46, 12, -46, -12, -69, 17, -23, -53, -44, 1, -42, 2, 22, 15, -12, 5, -14, 13, -6, -14, -30, -10, -27, -69, -58, -5, -13, 7, -19, 19, 18, -44, -8, 27, -3, -25, -31, -9, -4, -84, -37, -8, -48, 3, -9, 28, 5, -52, -1, -21, 12, -17, -26, -31, -18, -68, -31, -25, -38, 9, -15, 33, 5, -56, -6, 12, -1, -23, -7, -9, -25, -59, -29, -37, -24, 13, -14, 25, 21, -57, -1, 8, -5, -27, 6, 1, -35, -72, -61, -71, -40, 11, -6, 29, 
  25, -3, -22, -10, 22, 13, 2, 9, -39, -20, -31, -35, -17, -18, 5, -15, 16, 12, -27, -13, -6, -10, 3, 6, -26, -20, -30, -51, 16, 9, 12, -39, 23, -17, 16, -52, -6, -5, 19, 3, -29, -9, -22, -52, -1, -19, 18, -22, 22, -37, 5, 1, -4, -15, 13, -2, -28, 3, 1, 6, 1, -5, 14, -8, 20, -32, 24, -28, 5, -17, 22, -26, -33, -11, -13, -1, 10, -43, 14, 13, 6, -34, 12, -16, -7, -2, 7, -38, -35, -28, 4, -3, -22, -15, 12, -4, 50, -22, 17, -6, -10, 0, 6, -69, -9, -2, 22, 9, -27, -45, 17, 3, 14, -34, 15, 19, -45, 8, -1, -51, 23, 10, 33, 28, -1, -40, -26, -24, -28, -56, 16, 16, -32, 6, -6, -26, 6, 17, 20, 23, 1, -57, -35, -30, -40, -29, 21, 19, -38, -1, 10, -39, 20, 12, 25, 28, 21, -30, -39, -10, -22, -35, 10, 14, -45, 28, -1, -37, 39, 12, 30, 26, 7, -57, -33, -13, -28, -23, 6, 30, -42, 2, 21, -27, 36, 18, 19, 29, 9, -35, -32, -24, -74, 15, 15, 18, -85, 7, 4, -22, 24, 32, 57, 20, -2, -67, -50, -19, 
  2, -40, -48, -5, 24, -29, -11, -18, -24, -18, -20, -21, -4, -9, -28, 19, -30, -25, -48, -6, 1, -23, -8, -21, -9, -6, -3, 10, -17, -4, -31, 10, -12, -60, 24, -19, -22, -6, -9, -17, -52, 2, -20, 10, 8, 5, 2, 8, 0, -57, 20, -39, 0, -3, 10, 14, -17, 35, -32, -3, 5, -5, -1, 3, 7, -22, 14, -39, 11, -6, 20, 1, -8, 23, 3, -15, 5, 0, -16, -3, 2, -27, 27, -28, -11, 1, 15, -4, 5, 17, 14, -6, 11, 9, -26, -8, 2, -23, 13, -64, -5, 15, -4, 0, -16, 28, 2, -24, 16, -20, -20, 15, 9, 1, 25, -27, -13, 13, -23, 23, -2, 17, 13, -25, 42, -15, -31, -2, 30, -12, 9, -52, -3, 18, -24, 27, -31, 25, 6, -32, 28, -21, 4, 19, 13, -24, 8, -30, -6, 4, -1, 17, -9, 20, 13, -29, 42, -50, -1, -29, 17, 12, -3, -15, -8, 13, 20, 20, -32, 19, 1, -17, 40, -58, -12, -46, 2, 26, 23, -31, -7, 5, -6, 21, -3, 23, 15, 10, 47, -54, -14, -29, -7, 51, 28, -6, -46, 8, -16, 21, 20, 25, -10, 4, 7, -38, -23, -33, 
  -8, -48, 3, 9, -24, -15, 20, 2, -2, -3, -22, -21, 14, 3, -3, -27, -8, -1, 17, 12, -1, 1, -6, 17, 1, 0, -13, 8, 7, -16, 12, -4, 9, 4, 21, 25, -4, 14, 10, 13, 5, -2, -10, 13, 5, -7, 4, 14, 17, -7, 8, -5, -18, -5, 20, 6, 4, 21, -15, 12, -3, 11, 2, 14, 7, -15, 9, -11, -41, -27, 28, -11, -14, 18, -10, -8, -6, 11, -3, 10, 11, -42, -15, -10, -64, -31, 22, -45, -21, 5, -22, -36, 18, 20, 35, 20, -2, -32, -3, 1, -15, -36, 24, -41, -12, -11, -35, 10, 13, 5, 25, 21, 6, -31, -16, 7, 10, -73, 11, -19, -54, -24, -62, -40, -18, -12, 18, 27, 23, -19, -35, -28, 9, -59, -7, 3, -38, 6, -13, -57, 6, -17, 8, 16, 15, -15, -79, -38, 41, -58, -16, 23, -49, 2, -50, -92, 4, -6, 25, 14, 17, 20, -59, 12, 47, -63, -34, 33, -23, 13, -33, -97, 16, -19, 16, 20, 33, 51, -61, 23, 42, -4, -88, 35, -4, 13, -27, -53, 29, -6, -1, 11, 17, 46, -6, -29, 34, 1, -26, 22, 14, 8, -33, -7, 1, -42, 26, 17, 
  29, -21, 11, 25, -70, 0, 17, -24, -5, -7, -16, 29, 1, 20, -3, 23, 21, -18, 11, -15, -23, -8, 12, -28, -10, -18, -18, -25, 10, 9, -3, 15, 2, 6, 6, 6, 0, -16, 1, -14, -2, -38, -28, -27, 2, -3, -22, 28, 10, 23, 2, 3, 3, -24, 8, -19, 8, -18, -11, 7, -20, -26, -26, 21, -1, 26, -12, 11, 3, 1, -20, -5, 19, -35, -7, 20, -35, -4, -16, 29, -17, 22, -27, 12, -3, -25, -13, 4, 9, -14, 0, -8, -32, -12, -3, -30, -32, 11, 0, -3, 8, -15, -14, 3, 12, 7, 8, -15, 21, 5, 4, 25, 16, 13, 13, 5, 14, -49, -5, 11, 16, 18, 11, -7, 24, -12, 26, -6, -25, 20, -29, 10, 0, -25, -4, 12, 22, 17, -29, -12, 21, 2, 42, -17, -43, 48, -65, 41, 11, -27, -1, 10, 41, 7, -27, 34, 14, -12, 37, -57, -31, 33, -6, 37, -1, -23, -1, 3, 20, 8, -28, 25, 8, 15, 47, -65, -16, 19, -85, 18, 0, -27, 10, 15, -21, 4, -91, -3, 2, 39, 49, -50, -15, 5, -69, 12, -2, -27, -16, 19, -31, -8, -77, 14, 40, 29, 14, -42, 
  -4, 3, -30, -22, -64, 36, -28, 1, -28, -17, -84, 45, -28, 21, 22, -13, -4, 5, -35, 20, -29, 8, -13, -4, 9, 1, -4, 19, -32, 18, 12, -16, -23, 10, -19, 21, -25, 0, -10, -2, 9, 2, 22, 11, -10, 0, 7, -51, 5, 19, 7, -1, -16, 7, 13, 17, 2, 3, -11, 11, 10, 29, 12, 12, -2, 5, 8, 22, -5, 10, 13, 15, -6, -20, -27, 8, 29, 9, 25, 2, 23, 5, 16, -5, 3, -34, 31, 13, -9, -21, -28, -10, 22, 22, -15, 33, 26, -24, 20, -32, -1, -31, 16, -22, -21, -40, -26, -89, 1, 24, -29, 40, 3, 7, 8, -15, 7, -22, 13, -17, -12, -61, -34, -127, -20, -20, -41, 39, -2, 7, 25, 11, 40, -48, 13, -14, -28, -47, -23, -125, 12, -4, -46, 33, 14, -6, 14, -31, 43, -43, 3, 1, -64, -16, -23, -105, -30, -26, -75, 19, -3, -12, 36, -8, 51, -44, 2, -4, -31, -10, -21, -126, -30, -53, -86, 16, 5, 40, 3, -5, 60, -39, -26, 3, 22, -3, -15, -74, -33, -55, -90, 38, 11, 14, -2, 35, 54, -14, 1, 11, 8, -30, 19, 0, -48, -68, -61, -15, 
  -21, 43, 7, -5, 30, 16, -31, 9, 31, 21, 54, 0, -20, -13, -18, -7, -6, 6, -3, 2, 8, -1, -4, -19, -15, 4, 33, 3, -26, 7, -20, -5, -16, -14, -25, -3, -9, 12, -2, -20, -32, -23, -35, -44, 13, 24, 3, -7, -10, 19, -18, 19, -9, 23, -25, 12, 2, -28, 7, 3, 14, 8, 4, -37, -7, 10, -14, 14, -20, 26, -4, 15, 11, -31, 14, 12, 7, 26, 11, -55, -34, 10, 10, -2, -35, 16, -12, 11, 6, -5, -4, 4, 11, -1, -2, -53, 1, 14, 6, 21, -19, 20, -13, 19, 21, 17, -2, 3, -7, -32, -2, -47, 3, 32, -17, 18, -14, 19, -3, 17, 17, 28, 7, -5, 5, -32, 18, -52, -5, 6, -30, 19, -24, 5, -2, 14, -3, 11, 9, 18, -19, -35, 14, -38, 7, 5, -31, -1, -7, -2, 11, 8, 7, 20, 12, -1, 0, -12, 21, -41, -8, -11, -6, 15, -19, 7, 21, 2, 21, 26, 5, 7, -5, -28, 27, -53, 12, 1, -43, -17, -18, -14, 21, 4, -35, 12, -33, -1, -17, -47, 22, -43, -7, -29, -18, -7, -9, 4, -21, -4, -43, 20, -59, -25, 10, -50, 10, -35, 
};
const TfArray<2, int> tensor_dimension7 = { 2, { 10,208 } };
const TfArray<1, float> quant7_scale = { 1, { 0.0098394909873604774, } };
const TfArray<1, int> quant7_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { -3144, -781, -1132, 1211, 320, 144, -1187, -843, -2239, -2255, 451, 1765, -161, 211, 120, 2418, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 0.00015407173486892134, 0.00024125333584379405, 0.00022194760094862431, 0.00018480466678738594, 0.00027682870859280229, 0.00028951515560038388, 0.00015033203817438334, 0.00025199027732014656, 0.00020361796487122774, 0.00021671986905857921, 0.00020010168373119086, 0.00026395192253403366, 0.00023575645172968507, 0.00023061195679474622, 0.00025972939329221845, 0.00022512492432724684, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*3*8] = { 
  /* [0][0][][] */ 43,78,68,-6,-67,17,37,5, 39,85,17,-46,-127,-44,95,-16, 0,79,22,-72,-100,-117,-1,-15, 
  /* [1][0][][] */ -70,-20,-59,-45,-32,-8,-11,22, -84,35,-63,-71,127,61,23,40, -52,27,-52,-112,-17,-21,22,-8, 
  /* [2][0][][] */ 27,-41,39,-1,-41,-41,-9,-3, 16,-31,-11,-1,-49,-55,-1,127, -20,-35,41,1,-63,15,4,14, 
  /* [3][0][][] */ -2,-51,0,-62,127,-4,-75,-38, 71,-29,4,2,-16,-27,-35,-42, -23,-69,-33,12,43,20,-27,19, 
  /* [4][0][][] */ -3,-27,-54,-34,-44,-21,19,-5, -45,-18,-95,5,-39,56,127,-11, -53,5,-47,-10,1,35,11,-50, 
  /* [5][0][][] */ -62,58,4,-39,-40,-8,-127,47, -19,1,35,-48,25,4,-126,-10, -37,53,27,-52,7,0,-92,40, 
  /* [6][0][][] */ 101,-95,107,108,-37,-127,6,-15, 44,-98,30,12,-96,-89,-39,13, -1,-51,-13,62,-78,-29,-35,1, 
  /* [7][0][][] */ 17,20,-12,-26,-7,127,-14,-6, 6,39,-27,-24,2,35,0,-9, 11,8,-49,-29,-4,78,22,3, 
  /* [8][0][][] */ -48,-124,-19,-23,12,-20,-3,12, -64,-66,-107,24,41,40,12,127, -6,-73,-47,30,63,61,11,-31, 
  /* [9][0][][] */ -32,-22,9,127,-56,69,6,33, -41,-19,6,0,-57,30,7,9, -7,-11,-18,90,-37,2,-12,1, 
  /* [10][0][][] */ -127,-32,-93,1,5,-6,14,95, -109,-62,-122,5,-7,6,-24,48, -58,-44,-79,50,-7,-7,-4,77, 
  /* [11][0][][] */ -68,18,-30,29,43,20,-85,-28, -44,-8,9,5,42,-17,-127,17, -43,-2,36,14,-30,1,-118,-55, 
  /* [12][0][][] */ -12,23,-127,8,-38,-5,-28,-2, 41,1,-104,-18,-13,-3,-30,-1, 80,52,-45,-14,-17,18,-8,101, 
  /* [13][0][][] */ 22,-25,19,-46,-108,-70,-95,-41, 23,67,83,-23,-67,-90,-127,-76, 28,42,88,-14,10,-48,-103,20, 
  /* [14][0][][] */ -10,22,16,1,-9,24,-6,-90, -8,116,10,19,21,-17,-20,-127, -7,-37,-37,10,22,-24,-17,-91, 
  /* [15][0][][] */ 31,-32,46,-68,-89,-127,-33,36, -18,-65,74,-50,-118,-111,-36,-7, -40,-45,-11,-43,-90,-79,84,59, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,3,8 } };
const TfArray<16, float> quant9_scale = { 16, { 0.003461489686742425, 0.0054201763123273849, 0.0049864393658936024, 0.0041519585065543652, 0.0062194392085075378, 0.0065044621005654335, 0.0033774708863347769, 0.0056614005006849766, 0.0045746322721242905, 0.0048689893446862698, 0.0044956328347325325, 0.0059301396831870079, 0.005296679213643074, 0.0051810992881655693, 0.0058352728374302387, 0.0050578233785927296, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[8] = { -2960, -151, -1300, -1794, -3004, -1292, -1130, -462, };
const TfArray<1, int> tensor_dimension10 = { 1, { 8 } };
const TfArray<8, float> quant10_scale = { 8, { 0.00021952950919512659, 0.00025178483338095248, 0.00028996355831623077, 0.0002100718702422455, 0.00028139183996245265, 0.00020747334929183125, 0.00036927280598320067, 0.00024712708545848727, } };
const TfArray<8, int> quant10_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[8*1*3*13] = { 
  /* [0][0][][] */ 8,-66,-27,-7,31,-57,74,10,97,63,32,-25,62, -37,-53,-25,-86,51,-15,-78,79,-6,40,15,10,60, 4,-20,52,-51,-26,43,44,-18,52,49,7,-127,81, 
  /* [1][0][][] */ -98,-8,16,1,-127,59,29,13,-2,50,-52,-7,-30, -72,72,12,-81,-72,86,75,14,-2,9,-50,-16,-28, -51,19,33,-60,-35,47,-8,-10,42,24,-67,-77,1, 
  /* [2][0][][] */ -15,36,-127,-24,-74,2,94,22,-11,7,-16,-57,18, -76,-51,64,2,-52,52,56,51,-25,-1,-12,-14,3, -82,-48,20,-25,-36,32,63,47,15,-25,-1,-26,11, 
  /* [3][0][][] */ -102,-22,65,27,-35,-94,74,21,34,43,37,-10,-31, -13,-6,5,127,-40,-44,35,-50,13,75,12,8,-9, 4,-86,60,42,-19,-43,81,-38,29,69,-6,63,-41, 
  /* [4][0][][] */ -3,-23,84,56,-45,60,-60,-7,19,-58,17,9,19, 38,20,96,-18,-36,27,-39,-20,-4,-37,10,-24,36, -28,51,127,6,-38,34,-63,-17,3,-24,9,-25,11, 
  /* [5][0][][] */ -60,74,45,98,-21,-16,-31,4,-22,100,-59,-8,14, 2,71,84,-8,-64,1,57,-91,5,3,-40,-38,-16, -13,122,24,114,-127,102,-17,-55,75,38,-58,22,-7, 
  /* [6][0][][] */ 26,127,-37,21,5,-49,17,6,-14,1,9,-20,-21, -5,92,-31,-8,24,-32,-6,8,-22,9,6,-44,-9, 39,79,27,-17,18,-35,10,9,-2,-19,-26,19,-29, 
  /* [7][0][][] */ -36,-23,109,81,29,-23,-42,-14,-23,29,9,-76,79, -93,-23,54,40,-11,-83,-36,38,-13,12,2,-30,35, -54,60,5,76,-74,-127,58,73,-33,47,24,-59,28, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 8,1,3,13 } };
const TfArray<8, float> quant11_scale = { 8, { 0.0044718766584992409, 0.0051289265975356102, 0.0059066377580165863, 0.0042792218737304211, 0.0057320292107760906, 0.0042262892238795757, 0.0075221885927021503, 0.0050340467132627964, } };
const TfArray<8, int> quant11_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,1,50,13 } };
const TfArray<1, float> quant12_scale = { 1, { 0.049091137945652008, } };
const TfArray<1, int> quant12_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,1,50,8 } };
const TfArray<1, float> quant13_scale = { 1, { 0.044510237872600555, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,50,1,8 } };
const TfArray<1, float> quant14_scale = { 1, { 0.044510237872600555, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,25,1,8 } };
const TfArray<1, float> quant15_scale = { 1, { 0.044510237872600555, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,25,8 } };
const TfArray<1, float> quant16_scale = { 1, { 0.044510237872600555, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,25,16 } };
const TfArray<1, float> quant17_scale = { 1, { 0.04356016218662262, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,25,1,16 } };
const TfArray<1, float> quant18_scale = { 1, { 0.04356016218662262, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,13,1,16 } };
const TfArray<1, float> quant19_scale = { 1, { 0.04356016218662262, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,208 } };
const TfArray<1, float> quant20_scale = { 1, { 0.04356016218662262, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,10 } };
const TfArray<1, float> quant21_scale = { 1, { 0.16815891861915588, } };
const TfArray<1, int> quant21_zero = { 1, { 37 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,10 } };
const TfArray<1, float> quant22_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 12 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 12,11,10 } };
const TfArray<1, int> outputs1 = { 1, { 13 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 13,2 } };
const TfArray<1, int> outputs2 = { 1, { 14 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 14 } };
const TfArray<1, int> outputs3 = { 1, { 15 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 15,3 } };
const TfArray<1, int> outputs4 = { 1, { 16 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 16,9,8 } };
const TfArray<1, int> outputs5 = { 1, { 17 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 17,4 } };
const TfArray<1, int> outputs6 = { 1, { 18 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 18 } };
const TfArray<1, int> outputs7 = { 1, { 19 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 19,5 } };
const TfArray<1, int> outputs8 = { 1, { 20 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 20,7,6 } };
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 656), (TfLiteIntArray*)&g0::tensor_dimension0, 650, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 8, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 2080, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 312, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension12, 650, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 656), (TfLiteIntArray*)&g0::tensor_dimension13, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension14, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 400), (TfLiteIntArray*)&g0::tensor_dimension15, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension16, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 400), (TfLiteIntArray*)&g0::tensor_dimension17, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension18, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 400), (TfLiteIntArray*)&g0::tensor_dimension19, 208, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension20, 208, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 208), (TfLiteIntArray*)&g0::tensor_dimension21, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension22, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[11] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[11] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_RESHAPE, OP_CONV_2D, OP_RESHAPE, OP_MAX_POOL_2D, OP_RESHAPE, OP_CONV_2D, OP_RESHAPE, OP_MAX_POOL_2D, OP_RESHAPE, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 23, };
const size_t tflNodes_subgraph_index[] = {0, 11, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  22, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 23;
  for (size_t i = 0; i < 23; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 11; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
